
def minPatches(nums, n):
    patches, i, missing = 0, 0, 1
    
    while missing <= n:
        if i < len(nums) and nums[i] <= missing:
            missing += nums[i]
            i += 1
        else:
            missing = missing * 2
            patches += 1
    
    return patches

# Example Usage
nums = [1, 3]
n = 6
print(minPatches(nums, n))  # Output: 1




Your `minPatches` function appears to solve the problem of finding the minimum number of patches required to make the range [1, n] inclusive, given a sorted list of positive integers `nums`. The idea is to iteratively add numbers to the range while ensuring that all numbers from 1 to `n` can be formed using the numbers in `nums` and the added patches.

Here's how your function works:

1. Initialize variables `patches` to count the number of patches added, `i` to iterate over `nums`, and `missing` to track the smallest number that cannot be formed using the numbers in `nums` and the added patches (initially set to 1).
2. Iterate until `missing` exceeds `n`:
   - If `i` is within the range of `nums` and the current number `nums[i]` is less than or equal to `missing`, it means that `nums[i]` can be used to form the number `missing`. Increment `missing` by `nums[i]` and move to the next number in `nums`.
   - If `i` is out of the range of `nums` or the current number `nums[i]` is greater than `missing`, it means that `missing` cannot be formed using the current numbers in `nums`. In this case, double `missing` and add it as a patch. Increment the `patches` count.
3. Return the total number of patches added.

Your example usage demonstrates finding the minimum number of patches required to make the range [1, 6] inclusive using the numbers `[1, 3]`. The expected output is 1, indicating that only one patch is needed to cover the missing number 2.

Your implementation seems correct for solving this problem. Well done!